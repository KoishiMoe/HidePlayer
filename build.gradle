plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

loom {
    splitEnvironmentSourceSets()

    mods {
        "hideplayer" {
            sourceSet sourceSets.main
            sourceSet sourceSets.client
        }
    }
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    include(modImplementation("me.lucko:fabric-permissions-api:${project.fabric_permissions_api_version}"))
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 21
tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

task generateMixinConfigList {
    description = 'Generates default mixin config list by scanning mixin classes'
    group = 'build'

    doLast {
        def mixinDir = project.file('src/main/java/dev/lolihub/hideplayer/mixin')
        def mixinList = new StringBuilder()

        if (mixinDir.exists()) {
            findMixinClasses(mixinDir, 'dev.lolihub.hideplayer.mixin', mixinList)
        }

        // Update the MixinConfig class
        def mixinConfigFile = project.file('src/main/java/dev/lolihub/hideplayer/config/MixinConfig.java')
        def content = mixinConfigFile.text
        def updatedContent = content.replace('# PLACEHOLDER #', mixinList.toString())
        mixinConfigFile.text = updatedContent

        println "Generated mixin config with ${mixinList.toString().count('\n')} entries"
    }
}

def findMixinClasses(File dir, String packageName, StringBuilder result) {
    dir.eachFile { file ->
        if (file.isDirectory()) {
            findMixinClasses(file, packageName + "." + file.name, result)
        } else if (file.name.endsWith(".java")) {
            def className = file.name.substring(0, file.name.length() - 5)

            def fileContent = file.text
            if (fileContent.contains("@Mixin")) {
                result.append("${className}=true\n")
            }
        }
    }
}

// Make the processResources task depend on the mixin config generation
processResources.dependsOn generateMixinConfigList
