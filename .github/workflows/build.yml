# Automatically build the project and run any configured tests for every push
# and submitted pull request. This can help catch issues that only occur on
# certain platforms or Java versions, and provides a first line of defence
# against bad commits.

name: build
on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'
  pull_request:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: checkout repository
        uses: actions/checkout@main
      - name: validate gradle wrapper
        uses: gradle/actions/wrapper-validation@main
      - name: setup jdk 21
        uses: actions/setup-java@main
        with:
          java-version: 21
          distribution: 'zulu'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@main
        with:
          dependency-graph: generate-and-submit
      - name: make gradle wrapper executable
        run: chmod +x ./gradlew
      - name: build
        run: ./gradlew build
      - name: capture build artifacts
        uses: actions/upload-artifact@main
        with:
          name: Artifacts
          path: build/libs/


      - name: Get version from gradle.properties
        id: get_version
        run: |
          version=$(grep "^\W*mod_version" gradle.properties | cut -d'=' -f2 | xargs)
          echo "version=$version" >> $GITHUB_ENV

      - name: Check commit author and verification
        id: check_commit
        run: |
          COMMIT_SHA=$(git rev-parse HEAD)
          COMMIT_DETAILS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/commits/$COMMIT_SHA)
          COMMIT_AUTHOR=$(echo $COMMIT_DETAILS | jq -r '.commit.author.name')
          VERIFIED=$(echo $COMMIT_DETAILS | jq -r '.commit.verification.verified')
          echo "COMMIT_AUTHOR=$COMMIT_AUTHOR" >> $GITHUB_ENV
          echo "VERIFIED=$VERIFIED" >> $GITHUB_ENV

      - name: Publish Release
        if: ${{ github.event_name != 'pull_request' && (github.event.inputs.release == 'true' || (env.COMMIT_AUTHOR == 'KoishiMoe' && env.VERIFIED == 'true' && contains(github.event.head_commit.message, '[release]'))) }}
        uses: Kir-Antipov/mc-publish@v3.3
        with:
          # Only include this section if you wish to publish
          # your assets on GitHub.
          github-token: ${{ secrets.GITHUB_TOKEN }}
          github-tag: "v${{ env.version }}-1.21.4"
          name: "Release v${{ env.version }} for 1.21.4"
